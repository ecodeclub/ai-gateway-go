// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ai/v1/ai.proto

package aiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_Invoke_FullMethodName = "/ai.v1.AIService/Invoke"
	AIService_Stream_FullMethodName = "/ai.v1.AIService/Stream"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	// Invoke 方法用于执行一个同步的gRPC调用。
	// 参数:
	//   - ctx: 上下文对象，用于控制请求的生命周期
	//   - in: 请求参数，类型为LLMRequest
	//   - opts: 可选的调用选项，类型为grpc.CallOption
	// 返回值:
	//   - *LLMResponse: 响应结果，类型为LLMResponse的指针
	//   - error: 如果调用过程中发生错误，返回相应的错误信息
	Invoke(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)

	// Stream 方法用于创建一个服务器流式gRPC连接。
	// 参数:
	//   - ctx: 上下文对象，用于控制请求的生命周期
	//   - in: 请求参数，类型为LLMRequest
	//   - opts: 可选的调用选项，类型为grpc.CallOption
	// 返回值:
	//   - grpc.ServerStreamingClient[StreamEvent]: 服务器流式客户端接口
	//   - error: 如果创建流式连接过程中发生错误，返回相应的错误信息
	Stream(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEvent], error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

// NewAIServiceClient 创建一个新的AIService客户端实例。
// 参数:
//   - cc: 客户端连接接口，类型为grpc.ClientConnInterface
//
// 返回值:
//   - AIServiceClient: 返回一个实现了AIServiceClient接口的实例
func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

// Invoke 方法用于执行一个同步的gRPC调用。
// 参数:
//   - ctx: 上下文对象，用于控制请求的生命周期
//   - in: 请求参数，类型为LLMRequest
//   - opts: 可选的调用选项，类型为grpc.CallOption
//
// 返回值:
//   - *LLMResponse: 响应结果，类型为LLMResponse的指针
//   - error: 如果调用过程中发生错误，返回相应的错误信息
func (c *aIServiceClient) Invoke(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMResponse)
	err := c.cc.Invoke(ctx, AIService_Invoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) Stream(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[0], AIService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LLMRequest, StreamEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_StreamClient = grpc.ServerStreamingClient[StreamEvent]

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
type AIServiceServer interface {
	Invoke(context.Context, *LLMRequest) (*LLMResponse, error)
	Stream(*LLMRequest, grpc.ServerStreamingServer[StreamEvent]) error
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer 必须被嵌入以实现向前兼容的接口。
//
// NOTE: 这个结构体应该通过值而不是指针来嵌入，以避免在方法调用时出现nil指针解引用。
type UnimplementedAIServiceServer struct{}

// Invoke 方法返回一个未实现的错误。
// 参数:
//   - context.Context: 上下文对象，用于控制请求的生命周期
//   - *LLMRequest: 请求参数，类型为LLMRequest
//
// 返回值:
//   - *LLMResponse: 响应结果，类型为LLMResponse的指针
//   - error: 返回一个表示该方法未实现的错误信息
func (UnimplementedAIServiceServer) Invoke(context.Context, *LLMRequest) (*LLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}

// Stream 方法返回一个未实现的错误。
// 参数:
//   - *LLMRequest: 请求参数，类型为LLMRequest
//   - grpc.ServerStreamingServer[StreamEvent]: 服务器流式接口
//
// 返回值:
//   - error: 返回一个表示该方法未实现的错误信息
func (UnimplementedAIServiceServer) Stream(*LLMRequest, grpc.ServerStreamingServer[StreamEvent]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

// mustEmbedUnimplementedAIServiceServer 方法用于确保UnimplementedAIServiceServer被正确嵌入。
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}

// testEmbeddedByValue 方法用于测试UnimplementedAIServiceServer是否通过值嵌入。
func (UnimplementedAIServiceServer) testEmbeddedByValue() {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

// RegisterAIServiceServer 注册AIService服务到gRPC服务注册器。
//
// 参数:
//   - s: gRPC服务注册器接口
//   - srv: AIService服务的实现
func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

// _AIService_Invoke_Handler 是Invoke方法的gRPC处理程序。
//
// 参数:
//   - srv: 服务实例
//   - ctx: 上下文对象，用于控制请求的生命周期
//   - dec: 解码函数，用于将请求消息解码为具体类型
//   - interceptor: 拦截器，用于处理Unary RPC的拦截逻辑
//
// 返回值:
//   - interface{}: 处理结果
//   - error: 如果处理过程中发生错误，返回相应的错误信息
func _AIService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Invoke(ctx, req.(*LLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// _AIService_Stream_Handler 是Stream方法的gRPC处理程序。
//
// 参数:
//   - srv: 服务实例
//   - stream: gRPC服务器流接口
//
// 返回值:
//   - error: 如果处理过程中发生错误，返回相应的错误信息
func _AIService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LLMRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).Stream(m, &grpc.GenericServerStream[LLMRequest, StreamEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_StreamServer = grpc.ServerStreamingServer[StreamEvent]

// AIService_ServiceDesc 是AIService服务的gRPC服务描述符。
//
// 这个描述符用于将服务注册到gRPC服务器，不应该被直接检查或修改。
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.v1.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _AIService_Invoke_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _AIService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ai/v1/ai.proto",
}
