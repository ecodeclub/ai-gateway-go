// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/llm/llm.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/ai-gateway-go/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockLLMHandler is a mock of LLMHandler interface.
type MockLLMHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLLMHandlerMockRecorder
}

// MockLLMHandlerMockRecorder is the mock recorder for MockLLMHandler.
type MockLLMHandlerMockRecorder struct {
	mock *MockLLMHandler
}

// NewMockLLMHandler creates a new mock instance.
func NewMockLLMHandler(ctrl *gomock.Controller) *MockLLMHandler {
	mock := &MockLLMHandler{ctrl: ctrl}
	mock.recorder = &MockLLMHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMHandler) EXPECT() *MockLLMHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockLLMHandler) Handle(ctx context.Context, req domain.LLMRequest) (domain.LLMResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(domain.LLMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockLLMHandlerMockRecorder) Handle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockLLMHandler)(nil).Handle), ctx, req)
}

// StreamHandle mocks base method.
func (m *MockLLMHandler) StreamHandle(ctx context.Context, req domain.LLMRequest) (chan domain.StreamEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamHandle", ctx, req)
	ret0, _ := ret[0].(chan domain.StreamEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamHandle indicates an expected call of StreamHandle.
func (mr *MockLLMHandlerMockRecorder) StreamHandle(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamHandle", reflect.TypeOf((*MockLLMHandler)(nil).StreamHandle), ctx, req)
}
