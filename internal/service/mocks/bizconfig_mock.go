// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/bizconfig.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/bizconfig.go -destination=internal/service/mocks/bizconfig_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/ai-gateway-go/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBizConfigService is a mock of BizConfigService interface.
type MockBizConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockBizConfigServiceMockRecorder
	isgomock struct{}
}

// MockBizConfigServiceMockRecorder is the mock recorder for MockBizConfigService.
type MockBizConfigServiceMockRecorder struct {
	mock *MockBizConfigService
}

// NewMockBizConfigService creates a new mock instance.
func NewMockBizConfigService(ctrl *gomock.Controller) *MockBizConfigService {
	mock := &MockBizConfigService{ctrl: ctrl}
	mock.recorder = &MockBizConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBizConfigService) EXPECT() *MockBizConfigServiceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockBizConfigService) Save(ctx context.Context, config domain.BizConfig) (domain.BizConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, config)
	ret0, _ := ret[0].(domain.BizConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBizConfigServiceMockRecorder) Create(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBizConfigService)(nil).Save), ctx, config)
}

// Delete mocks base method.
func (m *MockBizConfigService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBizConfigServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBizConfigService)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockBizConfigService) GetByID(ctx context.Context, id int64) (domain.BizConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.BizConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBizConfigServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBizConfigService)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockBizConfigService) Update(ctx context.Context, config domain.BizConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBizConfigServiceMockRecorder) Update(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBizConfigService)(nil).Update), ctx, config)
}
