// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/llm/llm.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/llm/llm.go -destination=internal/service/mocks/llm_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/ai-gateway-go/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockHandler) Chat(ctx context.Context, req []domain.Message) (domain.ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", ctx, req)
	ret0, _ := ret[0].(domain.ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockHandlerMockRecorder) Chat(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockHandler)(nil).Chat), ctx, req)
}

// StreamHandle mocks base method.
func (m *MockHandler) StreamHandle(ctx context.Context, req []domain.Message) (chan domain.StreamEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamHandle", ctx, req)
	ret0, _ := ret[0].(chan domain.StreamEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamHandle indicates an expected call of StreamHandle.
func (mr *MockHandlerMockRecorder) StreamHandle(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamHandle", reflect.TypeOf((*MockHandler)(nil).StreamHandle), ctx, req)
}
